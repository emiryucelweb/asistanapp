---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title?: string;
  description?: string;
}

const { 
  title = 'AsistanApp – Çok Kanallı AI Asistan Platformu', 
  description = 'İşletmeniz için WhatsApp, Instagram, Facebook, Twitter/X, Web ve Ses kanallarında yapay zekâ destekli müşteri iletişimi. KVKV/GDPR uyumlu, üretime hazır.' 
} = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="tr" data-lang="tr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Theme -->
    <meta name="theme-color" content="#f97316" />
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://asistanapp.com.tr" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
  </head>
  
  <body>
    <div class="page-container">
      <Header />
      
      <main>
        <slot />
      </main>
      
      <Footer />
    </div>
    
    <!-- Language switching script -->
    <script is:inline>
      (function() {
        // Initialize language from localStorage or default to Turkish
        function initLanguage() {
          try {
            const saved = localStorage.getItem('asistanapp-lang');
            const lang = saved || 'tr';
            document.documentElement.setAttribute('data-lang', lang);
            return lang;
          } catch (e) {
            return 'tr';
          }
        }
        
        // Set language and save to localStorage
        function setLanguage(lang) {
          try {
            document.documentElement.setAttribute('data-lang', lang);
            localStorage.setItem('asistanapp-lang', lang);
            
            // Update active button states
            const buttons = document.querySelectorAll('.lang button');
            buttons.forEach(btn => {
              btn.classList.toggle('active', btn.textContent.toLowerCase() === lang);
            });
          } catch (e) {
            console.warn('Could not save language preference:', e);
          }
        }
        
        // Global function for language switching
        window.setLang = setLanguage;
        
        // Initialize on page load
        const currentLang = initLanguage();
        
        // Wait for DOM to be ready, then update button states
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', function() {
            setLanguage(currentLang);
            initAnimations();
          });
        } else {
          setLanguage(currentLang);
          initAnimations();
        }

        // Initialize smooth animations
        function initAnimations() {
          // Intersection Observer for scroll animations
          if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
              entries.forEach(entry => {
                if (entry.isIntersecting) {
                  entry.target.classList.add('in-view');
                  // Trigger staggered animations for children
                  const staggerElements = entry.target.querySelectorAll('.animate-stagger > *');
                  staggerElements.forEach((child, index) => {
                    setTimeout(() => {
                      child.style.opacity = '1';
                      child.classList.add('animate-fade-in-up');
                    }, index * 150);
                  });
                  observer.unobserve(entry.target);
                }
              });
            }, {
              threshold: 0.1,
              rootMargin: '50px'
            });

            // Observe all animation elements
            document.querySelectorAll('.observe-animation').forEach(el => {
              observer.observe(el);
            });
          }

          // Add smooth scrolling to anchor links
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
              e.preventDefault();
              const target = document.querySelector(this.getAttribute('href'));
              if (target) {
                target.scrollIntoView({
                  behavior: 'smooth',
                  block: 'start'
                });
              }
            });
          });
        }
      })();
    </script>
  </body>
</html>